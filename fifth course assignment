#include<bits/stdc++.h>

using namespace std;
const int maxn = 1e5 + 10;
typedef long long ll;
const double inf = 1e12;

struct Point{
	double x, y;
	Point(double x, double y) : x(x), y(y) {}
	Point(){}
	
	bool operator < (const Point &a) const {
		if(x != a.x)	return x < a.x;
		return y < a.y;
	}
	
	inline double dis(Point &a){
		return sqrt((x - a.x) * (x - a.x) + (y - a.y) * (y - a.y));
	}
	
}p[maxn], tmp[maxn];

//归并排序的合并整理操作
void Merge(int l, int r) {
 
	int mid = l + r >> 1;
	int i = l, j = mid + 1;
	int idx = l;
 
	while (i <= mid && j <= r) {
		if (p[i].y < p[j].y) 
			tmp[idx++] = p[i++];
		else 
			tmp[idx++] = p[j++];
	}
 
	while (i <= mid) 
		tmp[idx++] = p[i++];
	while (j <= r) 
		tmp[idx++] = p[j++];
 
	for (i = l; i <= r; i++) 
		p[i] = tmp[i];
}

double solve(Point *px, int l, int r, Point &p1, Point &p2) {
	if (r - l <= 0)	{//点数为1时输出无穷大
		return inf;
	}
	else if (r - l == 1) {		//点数为2直接输出点距同时记录点对
		Merge(l,r);
		p1 = px[l];
		p2 = px[r];
		return p[l].dis(p[r]);
	}
	else {
		Point c, d, e, f;
		double mindis;
	
		int mid = l + r >> 1;		//前面已排好序，直接平均分
		
		double middlex = p[mid].x;	//记录中线的x值，用于后面判断和存储中间区域的点
 
		double mindis1 = solve(px, l, mid, c, d);		//求左边部分的最短点距
		double mindis2 = solve(px, mid+1, r, e, f);	//求右边部分的最短点距
 
		if (mindis1 < mindis2){		//两边比较取最小值，并记录点对
			mindis = mindis1;
			p1 = c;
			p2 = d;
		}
		else{
			mindis = mindis2;
			p1 = e;
			p2 = f;
		}
 
		Point *temp = new Point[r - l + 1];		//将所有与中间点的横坐标距离小于mindis的点纳入数组
		int number = 0;
		
		Merge(l, r);			//对点进行合并操作，之后的数组已是按y值排好的数组
 
		for (int i = l; i <= r; i++) {
			if (fabs(px[i].x - middlex ) <= mindis) {	//数组内的数据相当于在横坐标范围[middlex-mindis,middlex+mindis]之间
				temp[number++] = px[i];
			}
		}
 
		double tempdis;		//遍历中间数组，每个点最多遍历其他点6次，记录最短距离和点对
		for (int i = 0; i < number; i++) {
			for (int j = i + 1; j < i+1+6 && j < number; j++) {
				tempdis = temp[i].dis(temp[j]);
				if (tempdis < mindis) {
					mindis = tempdis;
					p1 = temp[i];
					p2 = temp[j];
				}
			}
		}
		delete[]temp;
		return mindis;
	}
}
 
double solve2(int n){
	double res = inf;
	for(int i = 0; i < n; ++ i){
		for(int j = i + 1; j < n; ++ j){
			if(p[j].x - p[i].x > res)	break;
			res = min(res, p[i].dis(p[j]));
		}
	}
	return res;
}

signed main(){
	int n; scanf("%d", &n);
	for(int i = 0; i < n; ++ i){
		scanf("%lf %lf", &p[i].x, &p[i].y);
	}
	sort(p, p + n);
	printf("%lf\n", solve2(n));
	Point a, b;
	printf("%lf\n", solve(p, 1, n, a, b));
	return 0;
}
